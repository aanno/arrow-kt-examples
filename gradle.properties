kotlin.code.style=official
# obsolete
# kotlin.code.style=idea

arrowVersion=1.2.1
quiverVersion=0.5.0
arrowDetektVersion=0.4.0
inikioVersion=0.1
kotestVersion=5.8.0
detektVersion=1.23.5

# If set to true, enables Gradle Worker API for Detekt tasks. `false` by default.
# See the doc for the Worker API at https://docs.gradle.org/8.1/userguide/worker_api.html
detekt.use.worker.api = true

# https://pinterest.github.io/ktlint/0.49.1/faq/
# ktlint_standard_final-newline = disabled
ktlint_standard_final-newline = enabled


# https://docs.gradle.org/current/userguide/build_environment.html#sec:gradle_configuration_properties
#
#org.gradle.caching=(true,false)
#When set to true, Gradle will reuse task outputs from any previous build when possible, resulting in much faster builds.
#Default is false; the build cache is not enabled.
org.gradle.caching=true

#org.gradle.caching.debug=(true,false)
#When set to true, individual input property hashes and the build cache key for each task are logged on the console.
#Default is false.

#org.gradle.configuration-cache=(true,false)
#Enables configuration caching. Gradle will try to reuse the build configuration from previous builds.
#Default is false.
org.gradle.configuration-cache=true

#org.gradle.configuration-cache.inputs.unsafe.ignore.file-system-checks=(file path)
#Used to exclude file system checks on the specified path from configuration cache inputs fingerprinting.
#Default is null.

#org.gradle.configuration-cache.inputs.unsafe.ignore.in-serialization=(true,false)
#Used to ignore inputs in task graph serialization.
#Default is false.

#org.gradle.configuration-cache.problems=(fail,warn)
#Configures how the configuration cache handles problems.
#Set to warn to report problems without failing the build.
#Set to fail to report problems and fail the build if there are any problems.
#Default is fail.

#org.gradle.configuration-cache.max-problems=(# of problems)
#Configures the maximum number of configuration cache problems allowed as warnings until Gradle fails the build.
#Default is 512.

#org.gradle.configureondemand=(true,false)
#Enables incubating configuration on demand, where Gradle will attempt to configure only necessary projects.
#Default is false.

#org.gradle.console=(auto,plain,rich,verbose)
#Customize console output coloring or verbosity.
#Default depends on how Gradle is invoked.

#org.gradle.continue=(true,false)
#If enabled, continue task execution after a task failure, else stop task execution after a task failure.
#Default is false.

#org.gradle.continuous.quietperiod=(# of quiet period millis)
#When using continuous build, Gradle will wait for the quiet period to pass before triggering another build.
#Any additional changes within this quiet period restart the quiet period countdown.
#Default is 250 milliseconds.

#org.gradle.daemon=(true,false)
#When set to true the Gradle Daemon is used to run the build.
#Default is true.

#org.gradle.daemon.healthcheckinterval=(# of millis)
#Gradle Daemon health will be checked after a specified number of milliseconds.
#Default is 10000; (10 secs).

#org.gradle.daemon.idletimeout=(# of idle millis)
#Gradle Daemon will terminate itself after a specified number of idle milliseconds.
#Default is 10800000 (3 hours).

#org.gradle.daemon.registry.base=(directory)
#Specify a Daemon registry path where the daemon registry file (addresses of active daemons) and daemon log files reside.
#Default is . (local directory).

#org.gradle.debug=(true,false)
#When set to true, Gradle will run the build with remote debugging enabled, listening on port 5005.
#Note that this is equivalent to adding -agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005 to the JVM
#command line and will suspend the virtual machine until a debugger is attached.
#Default is false.

#org.gradle.debug.host=(host address)
#Specifies the host address to listen on or connect to when debug is enabled. In the server mode on Java 9 and above,
#passing * for the host will make the server listen on all network interfaces.
#Default is null;
#no host address is passed to JDWP (on Java 9 and above, the loopback address is used, while earlier versions
#listen on all interfaces).

#org.gradle.debug.port=(port number)
#Specifies the port number to listen on when debug is enabled.
#Default is 5005.

#org.gradle.debug.server=(true,false)
#If set to true and debugging is enabled, Gradle will run the build with the socket-attach mode of the debugger.
#Otherwise, the socket-listen mode is used.
#Default is true.

#org.gradle.debug.suspend=(true,false)
#When set to true and debugging is enabled, the JVM running Gradle will suspend until a debugger is attached.
#Default is true.

#org.gradle.dependency.verification=(strict,lenient,off)
#Configures the dependency verification mode where in strict mode verification fails as early as possible,
#in order to avoid the use of compromised dependencies during the build.
#Default is strict.

#org.gradle.internal.instrumentation.agent=(true,false)
#Enables the instrumentation Java agent for the daemon.
#Default is true.

#org.gradle.java.home=(path to JDK home)
#Specifies the Java home for the Gradle build process. The value can be set to either a jdk or jre location; however,
#depending on what your build does, using a JDK is safer. This does not affect the version of Java used
#to launch the Gradle client VM.
#Default is derived from your environment (JAVA_HOME or the path to java) if the setting is unspecified.

#org.gradle.jvmargs=(JVM arguments)
#Specifies the JVM arguments used for the Gradle Daemon. The setting is particularly useful for configuring
#JVM memory settings for build performance. This does not affect the JVM settings for the Gradle client VM.
#Default is -Xmx512m "-XX:MaxMetaspaceSize=384m".

#org.gradle.logging.level=(quiet,warn,info,debug)
#When set to quiet, warn, info, or debug, Gradle will use this log level. The values are not case-sensitive.
#Default is lifecycle level.
org.gradle.logging.level=lifecycle

#org.gradle.logging.stacktrace=(internal,all,full)
#Specifies whether stacktraces should be displayed as part of the build result upon an exception.
#See the --stacktrace command-line option for additional information.
#When set to internal, a stacktrace is present in the output only in case of internal exceptions.
#When set to all or full, a stacktrace is present in the output for all exceptions and build failures.
#Using full doesn?t truncate the stacktrace, which leads to a much more verbose output.
#Default is internal.

#org.gradle.parallel=(true,false)
#When configured, Gradle will fork up to org.gradle.workers.max JVMs to execute projects in parallel.
#Default is false.
org.gradle.parallel=true

#org.gradle.priority=(low,normal)
#Specifies the scheduling priority for the Gradle daemon and all processes launched by it.
#Default is normal.

#org.gradle.projectcachedir=(directory)
#Specify the project-specific cache directory. Defaults to .gradle in the root project directory."
#Default is .gradle.

#org.gradle.unsafe.isolated-projects=(true,false)
#Enables project isolation which enables configuration caching.
#Default is false.

#org.gradle.vfs.verbose=(true,false)
#Configures verbose logging when watching the file system.
#Default is false.

#org.gradle.vfs.watch=(true,false)
#Toggles watching the file system. When enabled, Gradle reuses information it collects about the
#file system between builds.
#Default is true on operating systems where Gradle supports this feature.

#org.gradle.vfs.watch.debug=(true,false)
#Enables debug events emitted in native-platform to be shown. Events are only shown when --debug is enabled or
#when the daemon is between builds.
#Default is false.

#org.gradle.warning.mode=(all,fail,summary,none)
#When set to all, summary or none, Gradle will use different warning type display.
#Default is summary.
org.gradle.warning.mode=all

#org.gradle.welcome=(never,once)
#Controls whether Gradle should print a welcome message.
#If set to never, then the welcome message will be suppressed.
#If set to once, then the message is printed once for each new version of Gradle.
#Default is once.

#org.gradle.workers.max=(max # of worker processes)
#When configured, Gradle will use a maximum of the given number of workers.
#Default is the number of CPU processors.

